import { ProductService } from './ProductService';
import { Product } from './Product';
import { ProductFilter } from './ProductFilter';

async function main() {
  console.log('üè™ Sistema de Filtrado de Productos - TheRefactorShop');
  console.log('üìê Patrones utilizados: Builder + Chain/Strategy');
  console.log('='.repeat(55));

  const products = [
    new Product('3', 'Apple', 0.99, ['food', 'free-shipping'], true),
    new Product('1', 'Banana', 1.50, ['food'], false),
    new Product('2', 'T-Shirt', 15.99, ['clothes', 'new'], true),
    new Product('4', 'Shampoo', 8.50, ['toiletries', 'offer'], true),
    new Product('5', 'Limited Watch', 299.99, ['limited-edition'], false)
  ];

  const productService = new ProductService(products);

  console.log('\nüì¶ Cat√°logo de productos disponibles:');
  const allProducts = productService.getAllProducts();
  allProducts.forEach(product => {
    const stockStatus = product.hasStock ? '‚úÖ En stock' : '‚ùå Sin stock';
    const categories = product.categories.join(', ');
    console.log(`  ${product.name} - ‚Ç¨${product.price} [${categories}] ${stockStatus}`);
  });

  console.log('\nüîç Ejemplos de filtrado:');
  console.log('-'.repeat(30));

  // Ejemplo 1: Filtrar por categor√≠a usando constructor directo
  console.log('\n1Ô∏è‚É£ Filtrar productos de comida (Constructor directo):');
  const foodFilter = new ProductFilter(['food']);
  const foodProducts = productService.filterProducts(foodFilter);
  foodProducts.forEach(product => {
    const stockStatus = product.hasStock ? '‚úÖ' : '‚ùå';
    console.log(`  ${stockStatus} ${product.name} - ‚Ç¨${product.price}`);
  });

  // Ejemplo 2: Filtrar por precio usando Builder pattern
  console.log('\n2Ô∏è‚É£ Filtrar productos entre ‚Ç¨1.00 y ‚Ç¨10.00 (Builder Pattern):');
  const priceFilter = ProductFilter.builder()
    .withPriceRange(1.00, 10.00)
    .build();
  const priceRangeProducts = productService.filterProducts(priceFilter);
  priceRangeProducts.forEach(product => {
    const stockStatus = product.hasStock ? '‚úÖ' : '‚ùå';
    console.log(`  ${stockStatus} ${product.name} - ‚Ç¨${product.price}`);
  });

  // Ejemplo 3: Combinar m√∫ltiples criterios usando Builder
  console.log('\n3Ô∏è‚É£ Filtrar comida barata (< ‚Ç¨2.00) usando Builder:');
  const combinedFilter = ProductFilter.builder()
    .withCategories(['food'])
    .withMaxPrice(2.00)
    .build();
  const combinedResults = productService.filterProducts(combinedFilter);
  combinedResults.forEach(product => {
    const stockStatus = product.hasStock ? '‚úÖ' : '‚ùå';
    console.log(`  ${stockStatus} ${product.name} - ‚Ç¨${product.price}`);
  });

  // Ejemplo 4: Filtro que no coincide con nada
  console.log('\n4Ô∏è‚É£ Filtrar comida cara (> ‚Ç¨50.00):');
  const expensiveFoodFilter = ProductFilter.builder()
    .withCategories(['food'])
    .withMinPrice(50.00)
    .build();
  const expensiveFood = productService.filterProducts(expensiveFoodFilter);
  if (expensiveFood.length === 0) {
    console.log('  üì≠ No se encontraron productos que coincidan con el filtro');
  }

  // Ejemplo 5: Sin filtro aplicado
  console.log('\n5Ô∏è‚É£ Sin filtro aplicado (todos los productos):');
  const noFilter = new ProductFilter();
  const allFilteredProducts = productService.filterProducts(noFilter);
  console.log(`  üìã Total de productos: ${allFilteredProducts.length}`);
  console.log('  üèÜ Productos con stock aparecen primero:');
  allFilteredProducts.forEach((product, index) => {
    const stockStatus = product.hasStock ? '‚úÖ' : '‚ùå';
    console.log(`    ${index + 1}. ${stockStatus} ${product.name}`);
  });

  // Ejemplo 6: Demostrar Builder pattern con m√©todos fluidos
  console.log('\n6Ô∏è‚É£ Builder pattern con m√©todos fluidos:');
  const builderFilter = ProductFilter.builder()
    .withCategories(['clothes', 'toiletries'])
    .withMinPrice(5.00)
    .build();
  const builderResults = productService.filterProducts(builderFilter);
  builderResults.forEach(product => {
    const stockStatus = product.hasStock ? '‚úÖ' : '‚ùå';
    const categories = product.categories.join(', ');
    console.log(`  ${stockStatus} ${product.name} - ‚Ç¨${product.price} [${categories}]`);
  });

  // Ejemplo 7: Filtro de stock usando Builder
  console.log('\n7Ô∏è‚É£ Filtrar solo productos en stock (Builder):');
  const inStockFilter = ProductFilter.builder()
    .withInStockOnly()
    .build();
  const inStockProducts = productService.filterProducts(inStockFilter);
  inStockProducts.forEach(product => {
    const categories = product.categories.join(', ');
    console.log(`  ‚úÖ ${product.name} - ‚Ç¨${product.price} [${categories}]`);
  });

  // Ejemplo 8: Combinaci√≥n compleja usando Builder
  console.log('\n8Ô∏è‚É£ Filtrar comida en stock (Builder + Chain):');
  const foodInStockFilter = ProductFilter.builder()
    .withCategories(['food'])
    .withInStockOnly()
    .build();
  const foodInStockProducts = productService.filterProducts(foodInStockFilter);
  foodInStockProducts.forEach(product => {
    console.log(`  ‚úÖ ${product.name} - ‚Ç¨${product.price}`);
  });

  // Ejemplo 9: Builder con m√∫ltiples categor√≠as
  console.log('\n9Ô∏è‚É£ Builder a√±adiendo categor√≠as una por una:');
  const multiCategoryFilter = ProductFilter.builder()
    .withCategory('food')
    .withCategory('clothes')
    .build();
  const multiCategoryProducts = productService.filterProducts(multiCategoryFilter);
  multiCategoryProducts.forEach(product => {
    const stockStatus = product.hasStock ? '‚úÖ' : '‚ùå';
    const categories = product.categories.join(', ');
    console.log(`  ${stockStatus} ${product.name} - ‚Ç¨${product.price} [${categories}]`);
  });

  console.log('\nüéØ Patrones implementados:');
  console.log('  üìê Builder Pattern:');
  console.log('    ‚Ä¢ ProductFilterBuilder con m√©todos fluidos');
  console.log('    ‚Ä¢ Construcci√≥n paso a paso de filtros complejos');
  console.log('    ‚Ä¢ M√©todos withCategories(), withPrice(), withStock()');
  console.log('  üîó Chain/Strategy Pattern:');
  console.log('    ‚Ä¢ FilterCriterion interface para estrategias');
  console.log('    ‚Ä¢ CategoryFilterCriterion, PriceFilterCriterion, StockFilterCriterion');
  console.log('    ‚Ä¢ Cadena de criterios aplicados en ProductFilter.matches()');
  console.log('  ‚ú® Caracter√≠sticas:');
  console.log('    ‚Ä¢ Filtrado por categor√≠a individual o m√∫ltiple');
  console.log('    ‚Ä¢ Filtrado por rango de precios');
  console.log('    ‚Ä¢ Filtrado por disponibilidad de stock');
  console.log('    ‚Ä¢ Ordenamiento autom√°tico: productos con stock primero');
  console.log('    ‚Ä¢ Arquitectura simple sin capas DDD');
}

if (require.main === module) {
  main().catch(console.error);
}

export { main }; 